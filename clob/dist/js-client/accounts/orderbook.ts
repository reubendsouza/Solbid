/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getOrderDecoder,
  getOrderEncoder,
  type Order,
  type OrderArgs,
} from '../types';

export const ORDERBOOK_DISCRIMINATOR = new Uint8Array([
  43, 34, 25, 113, 195, 69, 72, 7,
]);

export function getOrderbookDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ORDERBOOK_DISCRIMINATOR);
}

export type Orderbook = {
  discriminator: ReadonlyUint8Array;
  baseAsset: Address;
  quoteAsset: Address;
  baseVault: Address;
  quoteVault: Address;
  baseDecimals: number;
  quoteDecimals: number;
  bids: Array<Order>;
  asks: Array<Order>;
  authority: Address;
  orderCounter: bigint;
  bump: number;
};

export type OrderbookArgs = {
  baseAsset: Address;
  quoteAsset: Address;
  baseVault: Address;
  quoteVault: Address;
  baseDecimals: number;
  quoteDecimals: number;
  bids: Array<OrderArgs>;
  asks: Array<OrderArgs>;
  authority: Address;
  orderCounter: number | bigint;
  bump: number;
};

export function getOrderbookEncoder(): Encoder<OrderbookArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseAsset', getAddressEncoder()],
      ['quoteAsset', getAddressEncoder()],
      ['baseVault', getAddressEncoder()],
      ['quoteVault', getAddressEncoder()],
      ['baseDecimals', getU8Encoder()],
      ['quoteDecimals', getU8Encoder()],
      ['bids', getArrayEncoder(getOrderEncoder())],
      ['asks', getArrayEncoder(getOrderEncoder())],
      ['authority', getAddressEncoder()],
      ['orderCounter', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ORDERBOOK_DISCRIMINATOR })
  );
}

export function getOrderbookDecoder(): Decoder<Orderbook> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseAsset', getAddressDecoder()],
    ['quoteAsset', getAddressDecoder()],
    ['baseVault', getAddressDecoder()],
    ['quoteVault', getAddressDecoder()],
    ['baseDecimals', getU8Decoder()],
    ['quoteDecimals', getU8Decoder()],
    ['bids', getArrayDecoder(getOrderDecoder())],
    ['asks', getArrayDecoder(getOrderDecoder())],
    ['authority', getAddressDecoder()],
    ['orderCounter', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getOrderbookCodec(): Codec<OrderbookArgs, Orderbook> {
  return combineCodec(getOrderbookEncoder(), getOrderbookDecoder());
}

export function decodeOrderbook<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Orderbook, TAddress>;
export function decodeOrderbook<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Orderbook, TAddress>;
export function decodeOrderbook<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Orderbook, TAddress> | MaybeAccount<Orderbook, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOrderbookDecoder()
  );
}

export async function fetchOrderbook<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Orderbook, TAddress>> {
  const maybeAccount = await fetchMaybeOrderbook(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOrderbook<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Orderbook, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOrderbook(maybeAccount);
}

export async function fetchAllOrderbook(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Orderbook>[]> {
  const maybeAccounts = await fetchAllMaybeOrderbook(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOrderbook(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Orderbook>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOrderbook(maybeAccount));
}
