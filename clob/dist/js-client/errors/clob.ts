/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { CLOB_PROGRAM_ADDRESS } from '../programs';

/** InvalidOrderAmount: Order amount must be greater than zero */
export const CLOB_ERROR__INVALID_ORDER_AMOUNT = 0x1770; // 6000
/** InvalidOrderPrice: Order price must be greater than zero */
export const CLOB_ERROR__INVALID_ORDER_PRICE = 0x1771; // 6001
/** CalculationFailure: Calculation overflow or underflow */
export const CLOB_ERROR__CALCULATION_FAILURE = 0x1772; // 6002
/** InsufficientFunds: Insufficient funds for the order */
export const CLOB_ERROR__INSUFFICIENT_FUNDS = 0x1773; // 6003
/** OrderNotFound: Order not found */
export const CLOB_ERROR__ORDER_NOT_FOUND = 0x1774; // 6004
/** OrderbookFull: Orderbook is full */
export const CLOB_ERROR__ORDERBOOK_FULL = 0x1775; // 6005
/** InvalidOrderSide: Invalid order side */
export const CLOB_ERROR__INVALID_ORDER_SIDE = 0x1776; // 6006

export type ClobError =
  | typeof CLOB_ERROR__CALCULATION_FAILURE
  | typeof CLOB_ERROR__INSUFFICIENT_FUNDS
  | typeof CLOB_ERROR__INVALID_ORDER_AMOUNT
  | typeof CLOB_ERROR__INVALID_ORDER_PRICE
  | typeof CLOB_ERROR__INVALID_ORDER_SIDE
  | typeof CLOB_ERROR__ORDERBOOK_FULL
  | typeof CLOB_ERROR__ORDER_NOT_FOUND;

let clobErrorMessages: Record<ClobError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  clobErrorMessages = {
    [CLOB_ERROR__CALCULATION_FAILURE]: `Calculation overflow or underflow`,
    [CLOB_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds for the order`,
    [CLOB_ERROR__INVALID_ORDER_AMOUNT]: `Order amount must be greater than zero`,
    [CLOB_ERROR__INVALID_ORDER_PRICE]: `Order price must be greater than zero`,
    [CLOB_ERROR__INVALID_ORDER_SIDE]: `Invalid order side`,
    [CLOB_ERROR__ORDERBOOK_FULL]: `Orderbook is full`,
    [CLOB_ERROR__ORDER_NOT_FOUND]: `Order not found`,
  };
}

export function getClobErrorMessage(code: ClobError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (clobErrorMessages as Record<ClobError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isClobError<TProgramErrorCode extends ClobError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    CLOB_PROGRAM_ADDRESS,
    code
  );
}
