/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CLOB_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MATCH_ORDER_DISCRIMINATOR = new Uint8Array([
  95, 230, 21, 6, 114, 23, 41, 111,
]);

export function getMatchOrderDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MATCH_ORDER_DISCRIMINATOR);
}

export type MatchOrderInstruction<
  TProgram extends string = typeof CLOB_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountBaseTokenMint extends string | IAccountMeta<string> = string,
  TAccountQuoteTokenMint extends string | IAccountMeta<string> = string,
  TAccountUserBaseAccount extends string | IAccountMeta<string> = string,
  TAccountUserQuoteAccount extends string | IAccountMeta<string> = string,
  TAccountOrderBook extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountBaseTokenMint extends string
        ? ReadonlyAccount<TAccountBaseTokenMint>
        : TAccountBaseTokenMint,
      TAccountQuoteTokenMint extends string
        ? ReadonlyAccount<TAccountQuoteTokenMint>
        : TAccountQuoteTokenMint,
      TAccountUserBaseAccount extends string
        ? WritableAccount<TAccountUserBaseAccount>
        : TAccountUserBaseAccount,
      TAccountUserQuoteAccount extends string
        ? WritableAccount<TAccountUserQuoteAccount>
        : TAccountUserQuoteAccount,
      TAccountOrderBook extends string
        ? WritableAccount<TAccountOrderBook>
        : TAccountOrderBook,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MatchOrderInstructionData = {
  discriminator: ReadonlyUint8Array;
  orderId: bigint;
};

export type MatchOrderInstructionDataArgs = { orderId: number | bigint };

export function getMatchOrderInstructionDataEncoder(): Encoder<MatchOrderInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['orderId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MATCH_ORDER_DISCRIMINATOR })
  );
}

export function getMatchOrderInstructionDataDecoder(): Decoder<MatchOrderInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['orderId', getU64Decoder()],
  ]);
}

export function getMatchOrderInstructionDataCodec(): Codec<
  MatchOrderInstructionDataArgs,
  MatchOrderInstructionData
> {
  return combineCodec(
    getMatchOrderInstructionDataEncoder(),
    getMatchOrderInstructionDataDecoder()
  );
}

export type MatchOrderAsyncInput<
  TAccountUser extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountUserBaseAccount extends string = string,
  TAccountUserQuoteAccount extends string = string,
  TAccountOrderBook extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  userBaseAccount?: Address<TAccountUserBaseAccount>;
  userQuoteAccount?: Address<TAccountUserQuoteAccount>;
  orderBook?: Address<TAccountOrderBook>;
  baseVault?: Address<TAccountBaseVault>;
  quoteVault?: Address<TAccountQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  orderId: MatchOrderInstructionDataArgs['orderId'];
};

export async function getMatchOrderInstructionAsync<
  TAccountUser extends string,
  TAccountBaseTokenMint extends string,
  TAccountQuoteTokenMint extends string,
  TAccountUserBaseAccount extends string,
  TAccountUserQuoteAccount extends string,
  TAccountOrderBook extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CLOB_PROGRAM_ADDRESS,
>(
  input: MatchOrderAsyncInput<
    TAccountUser,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountUserBaseAccount,
    TAccountUserQuoteAccount,
    TAccountOrderBook,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MatchOrderInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountUserBaseAccount,
    TAccountUserQuoteAccount,
    TAccountOrderBook,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CLOB_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    userBaseAccount: { value: input.userBaseAccount ?? null, isWritable: true },
    userQuoteAccount: {
      value: input.userQuoteAccount ?? null,
      isWritable: true,
    },
    orderBook: { value: input.orderBook ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.userBaseAccount.value) {
    accounts.userBaseAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
      ],
    });
  }
  if (!accounts.userQuoteAccount.value) {
    accounts.userQuoteAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.orderBook.value) {
    accounts.orderBook.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 100, 101, 114, 98, 111, 111, 107])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.baseVault.value) {
    accounts.baseVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.orderBook.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
      ],
    });
  }
  if (!accounts.quoteVault.value) {
    accounts.quoteVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.orderBook.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.userBaseAccount),
      getAccountMeta(accounts.userQuoteAccount),
      getAccountMeta(accounts.orderBook),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMatchOrderInstructionDataEncoder().encode(
      args as MatchOrderInstructionDataArgs
    ),
  } as MatchOrderInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountUserBaseAccount,
    TAccountUserQuoteAccount,
    TAccountOrderBook,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type MatchOrderInput<
  TAccountUser extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountUserBaseAccount extends string = string,
  TAccountUserQuoteAccount extends string = string,
  TAccountOrderBook extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  userBaseAccount: Address<TAccountUserBaseAccount>;
  userQuoteAccount: Address<TAccountUserQuoteAccount>;
  orderBook: Address<TAccountOrderBook>;
  baseVault: Address<TAccountBaseVault>;
  quoteVault: Address<TAccountQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  orderId: MatchOrderInstructionDataArgs['orderId'];
};

export function getMatchOrderInstruction<
  TAccountUser extends string,
  TAccountBaseTokenMint extends string,
  TAccountQuoteTokenMint extends string,
  TAccountUserBaseAccount extends string,
  TAccountUserQuoteAccount extends string,
  TAccountOrderBook extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CLOB_PROGRAM_ADDRESS,
>(
  input: MatchOrderInput<
    TAccountUser,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountUserBaseAccount,
    TAccountUserQuoteAccount,
    TAccountOrderBook,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MatchOrderInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountBaseTokenMint,
  TAccountQuoteTokenMint,
  TAccountUserBaseAccount,
  TAccountUserQuoteAccount,
  TAccountOrderBook,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CLOB_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    userBaseAccount: { value: input.userBaseAccount ?? null, isWritable: true },
    userQuoteAccount: {
      value: input.userQuoteAccount ?? null,
      isWritable: true,
    },
    orderBook: { value: input.orderBook ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.userBaseAccount),
      getAccountMeta(accounts.userQuoteAccount),
      getAccountMeta(accounts.orderBook),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMatchOrderInstructionDataEncoder().encode(
      args as MatchOrderInstructionDataArgs
    ),
  } as MatchOrderInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountUserBaseAccount,
    TAccountUserQuoteAccount,
    TAccountOrderBook,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMatchOrderInstruction<
  TProgram extends string = typeof CLOB_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    baseTokenMint: TAccountMetas[1];
    quoteTokenMint: TAccountMetas[2];
    userBaseAccount: TAccountMetas[3];
    userQuoteAccount: TAccountMetas[4];
    orderBook: TAccountMetas[5];
    baseVault: TAccountMetas[6];
    quoteVault: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: MatchOrderInstructionData;
};

export function parseMatchOrderInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMatchOrderInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      baseTokenMint: getNextAccount(),
      quoteTokenMint: getNextAccount(),
      userBaseAccount: getNextAccount(),
      userQuoteAccount: getNextAccount(),
      orderBook: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMatchOrderInstructionDataDecoder().decode(instruction.data),
  };
}
