/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CLOB_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_ORDERBOOK_DISCRIMINATOR = new Uint8Array([
  195, 173, 118, 241, 60, 86, 168, 41,
]);

export function getInitializeOrderbookDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_ORDERBOOK_DISCRIMINATOR
  );
}

export type InitializeOrderbookInstruction<
  TProgram extends string = typeof CLOB_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountBaseTokenMint extends string | IAccountMeta<string> = string,
  TAccountQuoteTokenMint extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountQuoteVault extends string | IAccountMeta<string> = string,
  TAccountOrderBook extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountBaseTokenMint extends string
        ? ReadonlyAccount<TAccountBaseTokenMint>
        : TAccountBaseTokenMint,
      TAccountQuoteTokenMint extends string
        ? ReadonlyAccount<TAccountQuoteTokenMint>
        : TAccountQuoteTokenMint,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountQuoteVault extends string
        ? WritableAccount<TAccountQuoteVault>
        : TAccountQuoteVault,
      TAccountOrderBook extends string
        ? WritableAccount<TAccountOrderBook>
        : TAccountOrderBook,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeOrderbookInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeOrderbookInstructionDataArgs = {};

export function getInitializeOrderbookInstructionDataEncoder(): Encoder<InitializeOrderbookInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_ORDERBOOK_DISCRIMINATOR })
  );
}

export function getInitializeOrderbookInstructionDataDecoder(): Decoder<InitializeOrderbookInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeOrderbookInstructionDataCodec(): Codec<
  InitializeOrderbookInstructionDataArgs,
  InitializeOrderbookInstructionData
> {
  return combineCodec(
    getInitializeOrderbookInstructionDataEncoder(),
    getInitializeOrderbookInstructionDataDecoder()
  );
}

export type InitializeOrderbookAsyncInput<
  TAccountPayer extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountOrderBook extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  baseVault?: Address<TAccountBaseVault>;
  quoteVault?: Address<TAccountQuoteVault>;
  orderBook?: Address<TAccountOrderBook>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeOrderbookInstructionAsync<
  TAccountPayer extends string,
  TAccountBaseTokenMint extends string,
  TAccountQuoteTokenMint extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountOrderBook extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CLOB_PROGRAM_ADDRESS,
>(
  input: InitializeOrderbookAsyncInput<
    TAccountPayer,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountOrderBook,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeOrderbookInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountOrderBook,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CLOB_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    orderBook: { value: input.orderBook ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.orderBook.value) {
    accounts.orderBook.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([111, 114, 100, 101, 114, 98, 111, 111, 107])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.baseVault.value) {
    accounts.baseVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.orderBook.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
      ],
    });
  }
  if (!accounts.quoteVault.value) {
    accounts.quoteVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.orderBook.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.quoteTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.orderBook),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeOrderbookInstructionDataEncoder().encode({}),
  } as InitializeOrderbookInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountOrderBook,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeOrderbookInput<
  TAccountPayer extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountQuoteTokenMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountQuoteVault extends string = string,
  TAccountOrderBook extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  quoteTokenMint: Address<TAccountQuoteTokenMint>;
  baseVault: Address<TAccountBaseVault>;
  quoteVault: Address<TAccountQuoteVault>;
  orderBook: Address<TAccountOrderBook>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeOrderbookInstruction<
  TAccountPayer extends string,
  TAccountBaseTokenMint extends string,
  TAccountQuoteTokenMint extends string,
  TAccountBaseVault extends string,
  TAccountQuoteVault extends string,
  TAccountOrderBook extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CLOB_PROGRAM_ADDRESS,
>(
  input: InitializeOrderbookInput<
    TAccountPayer,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountOrderBook,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeOrderbookInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountBaseTokenMint,
  TAccountQuoteTokenMint,
  TAccountBaseVault,
  TAccountQuoteVault,
  TAccountOrderBook,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CLOB_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    quoteTokenMint: { value: input.quoteTokenMint ?? null, isWritable: false },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    quoteVault: { value: input.quoteVault ?? null, isWritable: true },
    orderBook: { value: input.orderBook ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.quoteTokenMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.quoteVault),
      getAccountMeta(accounts.orderBook),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeOrderbookInstructionDataEncoder().encode({}),
  } as InitializeOrderbookInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBaseTokenMint,
    TAccountQuoteTokenMint,
    TAccountBaseVault,
    TAccountQuoteVault,
    TAccountOrderBook,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeOrderbookInstruction<
  TProgram extends string = typeof CLOB_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    baseTokenMint: TAccountMetas[1];
    quoteTokenMint: TAccountMetas[2];
    baseVault: TAccountMetas[3];
    quoteVault: TAccountMetas[4];
    orderBook: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: InitializeOrderbookInstructionData;
};

export function parseInitializeOrderbookInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeOrderbookInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      baseTokenMint: getNextAccount(),
      quoteTokenMint: getNextAccount(),
      baseVault: getNextAccount(),
      quoteVault: getNextAccount(),
      orderBook: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeOrderbookInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
